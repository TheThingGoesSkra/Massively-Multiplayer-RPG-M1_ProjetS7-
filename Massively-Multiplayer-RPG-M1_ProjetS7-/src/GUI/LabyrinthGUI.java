package GUI;

import Game.Context;
import Game.Monster;
import Game.Participant;
import Game.Player;

import javax.swing.*;
import javax.swing.plaf.basic.BasicTreeUI;
import javax.swing.tree.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

/**
 *
 * @author Thomas
 */
public class LabyrinthGUI extends javax.swing.JPanel {

    // Variables declaration - do not modify
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTree jTree1;
    private static Context context;
    private String debutTexte;
    private String finTexte;
    // End of variables declaration
    public class MyTreeCellRenderer extends DefaultTreeCellRenderer {

        private JLabel label;

        MyTreeCellRenderer() {
            label = new JLabel();
        }

        @Override
        public Component getTreeCellRendererComponent(JTree tree, Object value,
                                                      boolean sel, boolean exp, boolean leaf, int row, boolean hasFocus) {
            super.getTreeCellRendererComponent(tree, value, sel, exp, leaf, row, hasFocus);

            // Assuming you have a tree of Strings
            String node = (String) ((DefaultMutableTreeNode) value).getUserObject();
            if (node.equals("root")) {

            }
            else if (node.equals("Monsters")) {
                label.setIcon(new ImageIcon(getClass().getResource("/GUI/Icones/Monsters.png")));
                label.setText("" + node);
            }else if(node.equals("Players")){
                label.setIcon(new ImageIcon(getClass().getResource("/GUI/Icones/Players.png")));
                label.setText("" + node);
            }else{
                // Paint the node in red
                setForeground(new Color(223, 24 ,24));
                label.setIcon(new ImageIcon(getClass().getResource("/GUI/Icones/life.png")));
                String[] resultats = node.split(" ");
                label.setText("<html><font color=red>"+resultats[0]+"</font> <font color=black>"+resultats[1]+"</font></html>");
            }
            label.setFont(new java.awt.Font("Tahoma", 0, 16));
            label.setPreferredSize(new Dimension(200,23));
            return label;
        }
    }

    /**
     * Creates new form LabyrinthGUI
     */
    public LabyrinthGUI(Context context) {
        this.context=context;
        initComponents();
        initJTree();
    }

    public JTree getjTree1() {
        return jTree1;
    }

    public void setjTree1(JTree jTree1) {
        this.jTree1 = jTree1;
    }

    public static Context getContext() {
        return context;
    }

    public static void setContext(Context context) {
        LabyrinthGUI.context = context;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();

        setLayout(new java.awt.BorderLayout());

        jPanel5.setBackground(new java.awt.Color(102, 102, 102));
        jPanel5.setLayout(new java.awt.BorderLayout());

        jScrollPane3.setBackground(new java.awt.Color(102, 102, 102));

        jTree1.setBackground(new java.awt.Color(102, 102, 102));
        jTree1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jTree1.setForeground(new java.awt.Color(204, 204, 255));
        jTree1.setMaximumSize(new java.awt.Dimension(107, 84));
        jTree1.setPreferredSize(new java.awt.Dimension(150, 64));
        DefaultMutableTreeNode treeNode1 = new DefaultMutableTreeNode("root");
        jTree1.setModel(new DefaultTreeModel(treeNode1));
        jTree1.setRootVisible(false);
        jTree1.setToggleClickCount(1);
        jTree1.setCellRenderer(new MyTreeCellRenderer());
        BasicTreeUI basicTreeUI = (BasicTreeUI) jTree1.getUI();
        basicTreeUI.setRightChildIndent(2);
        basicTreeUI.setLeftChildIndent(4);
        jTree1.setFocusable(false);
        jScrollPane3.setViewportView(jTree1);

        jPanel5.add(jScrollPane3, java.awt.BorderLayout.LINE_START);

        jScrollPane6.setBackground(new java.awt.Color(102, 102, 102));
        jScrollPane6.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jTextPane1.setEditable(false);
        jTextPane1.setFocusable(false);
        jTextPane1.setBackground(new java.awt.Color(102, 102, 102));
        jTextPane1.setBorder(null);
        jTextPane1.setContentType("text/html"); // NOI18N
        debutTexte="<html>\r\n<head>\r\n\r\n</head>\r\n<body bgcolor=\"#666666\">\r\n<p style=\"margin-top: 1 ; margin-left: 7\">\r<font size=\"+1\">C'est partie !<br>\n";
        finTexte="</font></p>\n</body>\n</html>\n";
        jTextPane1.setText(debutTexte+finTexte);
        jScrollPane6.setViewportView(jTextPane1);
        jPanel5.add(jScrollPane6, java.awt.BorderLayout.CENTER);

        add(jPanel5, java.awt.BorderLayout.CENTER);
    }// </editor-fold>

    public DefaultMutableTreeNode removeAllChildren(DefaultMutableTreeNode rootNode){
        while(rootNode.getChildCount() > 0){
            DefaultMutableTreeNode t = (DefaultMutableTreeNode)rootNode.getChildAt(0);
            rootNode.remove(t);
        }
        return rootNode;
    }

    public void removeAll(){
        DefaultMutableTreeNode myRoot = ((DefaultMutableTreeNode) jTree1.getModel().getRoot());
        myRoot = removeAllChildren(myRoot);
        ((DefaultTreeModel) jTree1.getModel()).setRoot(myRoot);
    }

    public void initJTree(){
        ArrayList<Player> players = context.getPlayers();
        ArrayList<Monster> monsters = context.getMonsters();
        for(Player player:players) {
            this.ajouterPlayer(player,0);
        }
        for(Monster monster:monsters) {
            this.ajouterMonster(monster,0);
        }
        DefaultTreeModel model = (DefaultTreeModel)this.jTree1.getModel();
        model.reload();
        expandAll(jTree1);
    }

    public void expandAll(JTree tree) {
        for (int i = 0; i < tree.getRowCount(); i++) {
            tree.expandRow(i);
        }
    }

    public DefaultMutableTreeNode ajouterCategorie(String nomCategorie){
        DefaultMutableTreeNode treeNode = new DefaultMutableTreeNode(nomCategorie);
        DefaultTreeModel model = (DefaultTreeModel)this.jTree1.getModel();
        DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode)model.getRoot();
        rootNode.add(treeNode);
        return treeNode;
    }

    public DefaultMutableTreeNode ajouterParticipant(Participant participant, int mode){
        DefaultMutableTreeNode treeNode = null;
        DefaultTreeModel model = (DefaultTreeModel)this.jTree1.getModel();
        DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode)model.getRoot();
        DefaultMutableTreeNode groupNode=null;
        if(participant instanceof Player){
            //Recherche du noeud
            groupNode = searchNode(rootNode,"Players");
        }else if(participant instanceof Monster){
            //Recherche du noeud
            groupNode = searchNode(rootNode,"Monsters");
        }

        //Si on ne le trouve pas on creer le groupe
        if(groupNode == null)
            if(participant instanceof Player){
                //Recherche du noeud
                groupNode = this.ajouterCategorie("Players");
            }else if(participant instanceof Monster){
                //Recherche du noeud
                groupNode = this.ajouterCategorie("Monsters");
            }

        //Creation du noeud
        String name=participant.getLife()+" "+participant.getName();
        treeNode = new DefaultMutableTreeNode(name);
        if(mode==0)
            groupNode.add(treeNode);
        else if(mode==1) {
            DefaultMutableTreeNode temp = searchNode(groupNode,name);
            if(temp != null) {
                temp.setUserObject(name);
            }else{
                groupNode.insert(treeNode, 0);
            }
        }
        model.reload();
        return treeNode;
    }

    public void removeParticipant(Participant participant){
        DefaultMutableTreeNode treeNode = null;
        DefaultTreeModel model = (DefaultTreeModel)this.jTree1.getModel();
        DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode)model.getRoot();
        DefaultMutableTreeNode groupNode=null;
        if(participant instanceof Player){
            //Recherche du noeud
            groupNode = searchNode(rootNode,"Players");
        }else if(participant instanceof Monster){
            //Recherche du noeud
            groupNode = searchNode(rootNode,"Monsters");
        }

        //Si on ne le trouve pas on creer le groupe
        if(groupNode == null)
            return;
        String name=participant.getLife()+" "+participant.getName();
        DefaultMutableTreeNode temp = searchNode(groupNode,name);
        if(temp != null) {
            DefaultMutableTreeNode parent=((DefaultMutableTreeNode) temp.getParent());
            parent.remove(temp);
            if(parent.getChildCount()==0)
                ((DefaultMutableTreeNode) parent.getParent()).remove(parent);

        }
    }

    public DefaultMutableTreeNode ajouterPlayer(Player participant, int mode){
        DefaultMutableTreeNode treeNode = null;
        DefaultTreeModel model = (DefaultTreeModel)this.jTree1.getModel();
        DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode)model.getRoot();
        DefaultMutableTreeNode groupNode=null;
        //Recherche du noeud
        groupNode = searchNode(rootNode,"Players");
        //Si on ne le trouve pas on creer le groupe
        if(groupNode == null)
            groupNode = this.ajouterCategorie("Players");
        //Creation du noeud
        String name=participant.getLife()+" "+participant.getName();
        treeNode = new DefaultMutableTreeNode(name);
        if(mode==0)
            groupNode.add(treeNode);
        else{
            DefaultMutableTreeNode temp = searchNode(groupNode,name);
            if(temp != null)
                groupNode.remove(temp);
            groupNode.insert(treeNode, 0);
        }
        return treeNode;
    }

    public DefaultMutableTreeNode ajouterMonster(Monster participant, int mode){
        DefaultMutableTreeNode treeNode = null;
        DefaultTreeModel model = (DefaultTreeModel)this.jTree1.getModel();
        DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode)model.getRoot();
        DefaultMutableTreeNode groupNode=null;
        //Recherche du noeud
        groupNode = searchNode(rootNode,"Monsters");
        //Si on ne le trouve pas on creer le groupe
        if(groupNode == null)
            groupNode = this.ajouterCategorie("Monsters");
        //Creation du noeud
        String name=participant.getLife()+" "+participant.getName();
        treeNode = new DefaultMutableTreeNode(name);
        if(mode==0)
            groupNode.add(treeNode);
        else{
            DefaultMutableTreeNode temp = searchNode(groupNode,name);
            if(temp != null)
                groupNode.remove(temp);
            groupNode.insert(treeNode, 0);
        }
        return treeNode;
    }

    public void resetJTree(){
        DefaultTreeModel model = (DefaultTreeModel)this.jTree1.getModel();
        DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode)model.getRoot();
        rootNode.removeAllChildren();
        model.setRoot(rootNode);
    }

    public static DefaultMutableTreeNode searchNode(DefaultMutableTreeNode parentNode, Object childNode){
        DefaultMutableTreeNode temp = null;
        Enumeration<?> children = parentNode.children();
        while (children.hasMoreElements()) {
            DefaultMutableTreeNode child = (DefaultMutableTreeNode) children.nextElement();
            if (child.isLeaf()){
                System.out.println(child.getUserObject().toString()+" et "+childNode);
                if (child.getUserObject().toString().split(" ")[1].equals(childNode.toString().split(" ")[1])) {
                    temp = child;
                    break;
                }
            }else{
                if (child.getUserObject().equals(childNode)) {
                    temp = child;
                    break;
                }
            }
        }
        return temp;
    }

    public static Enumeration saveExpansionState(JTree tree) {
        return tree.getExpandedDescendants(new TreePath(tree.getModel().getRoot()));
    }
    public static void loadExpansionState(JTree tree, Enumeration enumeration) {
        if (enumeration != null) {
            while (enumeration.hasMoreElements()) {
                TreePath treePath = (TreePath) enumeration.nextElement();
                tree.expandPath(treePath);
            }
        }
    }

    public void actualiserJTree(Participant participant , int mode){
        if(mode==0) {
            DefaultTreeModel model = (DefaultTreeModel) this.jTree1.getModel();
            DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode) model.getRoot();
        }else if (mode==1) {
            DefaultMutableTreeNode temp = this.ajouterParticipant(participant, 1);
        }
        expandAll(jTree1);
    }

    public void append(String string){
        debutTexte=debutTexte+string+"<br>\n";
        jTextPane1.setText(debutTexte+finTexte);
    }

    public void startFight(Participant forward, Participant attacked) {
        String forwardName="";
        String attackedName="";
        if(attacked instanceof Monster){
            attackedName="<font color=red>"+attacked.getName()+"</font>";
        }else if(attacked instanceof Player){
            attackedName="<font color=blue>"+attacked.getName()+"</font>";
        }
        if(forward instanceof Monster){
            forwardName="<font color=red>"+forward.getName()+"</font>";
        }else if(forward instanceof Player){
            forwardName="<font color=blue>"+forward.getName()+"</font>";
        }
        String alert=forwardName+" attaque "+attackedName+" !";
        append(alert);
    }
    public void hitpoints(Participant forward, Participant attacked, int hitpoints) {
        String forwardName="";
        String attackedName="";
        if(attacked instanceof Monster){
            attackedName="<font color=red>"+attacked.getName()+"</font>";
        }else if(attacked instanceof Player){
            attackedName="<font color=blue>"+attacked.getName()+"</font>";
        }
        if(forward instanceof Monster){
            forwardName="<font color=red>"+forward.getName()+"</font>";
        }else if(forward instanceof Player){
            forwardName="<font color=blue>"+forward.getName()+"</font>";
        }
        String alert=forwardName+" fait perdre "+hitpoints+" pts de vie à "+attackedName+".";
        append(alert);
        actualiserJTree(attacked,1);

    }
    public void endFight(ArrayList<Participant> winners, Participant looser) {
        String looserName="";
        if(looser instanceof Monster){
            looserName="<font color=red>"+looser.getName()+"</font>";
        }else if(looser instanceof Player){
            looserName="<font color=blue>"+looser.getName()+"</font>";
        }
        String alert="Perdant : "+looserName;
        if(winners.size()==1)
            alert=alert+" Gagnant : ";
        else
            alert=alert+" Gagnants : ";
        for (Iterator<Participant> ite = winners.iterator();ite.hasNext();){
            Participant winner=ite.next();
            if(winner instanceof Monster){
                alert=alert+"<font color=red>"+winner.getName()+"</font>";
            }else if(winner instanceof Player){
                alert=alert+"<font color=blue>"+winner.getName()+"</font>";
            }
            if(ite.hasNext())
                alert=alert+", ";
        }
        append(alert);
        removeParticipant(looser);
    }

    public void alertRunnaway(Participant forward, Participant runner) {
        String forwardName="";
        String runnerName="";
        if(runner instanceof Monster){
            runnerName="<font color=red>"+runner.getName()+"</font>";
        }else if(runner instanceof Player){
            runnerName="<font color=blue>"+runner.getName()+"</font>";
        }
        if(forward instanceof Monster){
            forwardName="<font color=red>"+forward.getName()+"</font>";
        }else if(forward instanceof Player){
            forwardName="<font color=blue>"+forward.getName()+"</font>";
        }
        String alert=runnerName+" fuit le combat face à "+forwardName+" !";
        append(alert);
    }
    public void heal() {
        String alert="Tous le monde est soigné !";
        append(alert);
    }
}
